{"file":"language.service.js","mappings":"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","names":[],"sources":["./src/assets/i18n/translations.ts","./src/services/language.service.ts"],"sourcesContent":["export const translations = {\r\n  'Close overlay': {\r\n    de: 'Overlay Schliessen',\r\n    fr: 'Fermer la superposition',\r\n    it: 'Chiudi sovrapposizione',\r\n  },\r\n  'Current language is English': {\r\n    de: 'Die aktuelle Sprache ist Deutsch',\r\n    fr: 'La langue actuelle est le français',\r\n    it: \"La lingua corrente è l'italiano\",\r\n  },\r\n  'Change language': {\r\n    de: 'Sprache wechseln',\r\n    fr: 'Changer de langue',\r\n    it: 'Cambia lingua',\r\n  },\r\n  'Go to main content': {\r\n    de: 'Zum Hauptinhalt springen',\r\n    fr: 'Aller au contenu principal',\r\n    it: 'Vai al contenuto principale',\r\n  },\r\n  'Go to search': {\r\n    de: 'Zur Suche springen',\r\n    fr: 'Aller à la recherche',\r\n    it: 'Vai alla ricerca',\r\n  },\r\n  'Go to login': {\r\n    de: 'Zum Login springen',\r\n    fr: 'Aller au login',\r\n    it: 'Vai al login',\r\n  },\r\n  'Open menu': {\r\n    de: 'Menü öffnen',\r\n    fr: 'Ouvrir le menu',\r\n    it: 'Apri il menu',\r\n  },\r\n  'Navigate on post.ch': {\r\n    de: 'Navigieren auf post.ch',\r\n    fr: 'Naviguer sur post.ch',\r\n    it: 'Navigate su post.ch',\r\n  },\r\n};\r\n","import { translations } from '../assets/i18n/translations';\r\nimport { state } from '../data/store';\r\n\r\nexport const getUserLang = (\r\n  supportedLanguages: string[],\r\n  implementorPreferredLanguage?: string,\r\n  localStorageKey?: string,\r\n  cookieKey?: string,\r\n) => {\r\n  // If there are no supported languages, well...\r\n  if (supportedLanguages.length === 0) {\r\n    return undefined;\r\n  }\r\n\r\n  // If there is only one language in the config, use this\r\n  if (supportedLanguages.length === 1) {\r\n    return supportedLanguages[0];\r\n  }\r\n\r\n  const url = new URL(window.location.href);\r\n\r\n  /**\r\n   * Build array of possible language definitions in order of importance.\r\n   * At the end is a filter function that will weed out any undefined or null entries.\r\n   */\r\n  let languagesSet: Array<string> = [\r\n    // Check if implementor overrides lang config\r\n    implementorPreferredLanguage,\r\n\r\n    // Check query string param\r\n    url.searchParams.get('lang'),\r\n\r\n    // Check url pathname\r\n    url.pathname.split('/').find(segment => supportedLanguages.includes(segment)),\r\n\r\n    // Check local storage with the key provided\r\n    localStorageKey !== undefined ? window.localStorage.getItem(localStorageKey) : null,\r\n\r\n    // Check cookies\r\n    getCookie('language'),\r\n    getCookie('lang'),\r\n    cookieKey !== undefined ? getCookie(cookieKey) : null,\r\n\r\n    // Check document language\r\n    document.documentElement.lang,\r\n\r\n    // Check browser preferred language\r\n    getPreferredLanguageFromBrowser(supportedLanguages),\r\n\r\n    // Check the state\r\n    state.currentLanguage,\r\n  ].filter((lang): lang is string => !!lang);\r\n\r\n  // Check the set of languages to see if it matches\r\n  // any of the supported languages. Return the first\r\n  // supported language if there is none set\r\n  const lang =\r\n    languagesSet.find(language => supportedLanguages.includes(language)) || supportedLanguages[0];\r\n\r\n  if (!lang || lang.length !== 2) {\r\n    throw new Error(\r\n      `Current language could not be determined from settings or the language provided (${lang}) is not supported by the Header API.`,\r\n    );\r\n  }\r\n\r\n  return lang;\r\n};\r\n\r\n/**\r\n * Persist chosen language to local storage\r\n * @param lang Currently chose language, two char string\r\n */\r\nexport const persistLanguageChoice = (\r\n  lang: string,\r\n  cookieKey?: string,\r\n  localStorageKey?: string,\r\n) => {\r\n  if (localStorageKey !== undefined) {\r\n    window.localStorage.setItem(localStorageKey, lang);\r\n  }\r\n\r\n  if (cookieKey !== undefined) {\r\n    setCookie(cookieKey, lang);\r\n  }\r\n\r\n  state.currentLanguage = lang;\r\n};\r\n\r\n/**\r\n * Read a cookie by name\r\n * https://stackoverflow.com/questions/5639346/what-is-the-shortest-function-for-reading-a-cookie-by-name-in-javascript?rq=1\r\n * @param name Cookie name\r\n * @returns Cookie value or an empty string\r\n */\r\nexport const getCookie = (name: string) => {\r\n  return document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)')?.pop() || '';\r\n};\r\n\r\n/**\r\n * Write a new cookie\r\n * https://developer.mozilla.org/en-US/docs/Web/API/document/cookie#A_little_framework.3A_a_complete_cookies_reader.2Fwriter_with_full_unicode_support\r\n * @param key\r\n * @param value\r\n */\r\nexport const setCookie = (key: string, value: string) => {\r\n  document.cookie = `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\r\n};\r\n\r\nconst getPreferredLanguageFromBrowser = (supportedLanguages: string[]): string | null => {\r\n  // IE & Chrome\r\n  if (navigator.language) {\r\n    const lang = extractLanguage(navigator.language);\r\n    if (supportedLanguages.indexOf(lang) !== -1) {\r\n      return lang;\r\n    }\r\n  }\r\n\r\n  // Chrome supports a list of preferred languages: if the preferred is not supported, we go down the list.\r\n  if (navigator.languages) {\r\n    for (const l of navigator.languages) {\r\n      const lang = extractLanguage(l);\r\n      if (supportedLanguages.indexOf(lang) !== -1) {\r\n        return lang;\r\n      }\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst extractLanguage = (language: string): string => language.substring(0, 2).toLowerCase();\r\n\r\n/**\r\n * Simple translate function for general header UI strings\r\n *\r\n * @param key Translation key\r\n * @param lang Force a language\r\n * @param translationObject Optionally provide translations\r\n * @returns Translated string or the key\r\n */\r\nexport const translate = (key: string, lang?: string, translationObject = translations) =>\r\n  translationObject[key]?.[lang ?? state.currentLanguage ?? ''] ?? key;\r\n"],"version":3}