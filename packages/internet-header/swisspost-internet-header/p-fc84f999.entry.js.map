{"version":3,"names":["markActiveRoute","config","activeRouteProp","compareUrl","resetOverrideConfig","hasActivePortalRoute","resetActiveStateToPortalConfig","URL","window","location","href","document","origin","error","console","warn","scoreList","compileScoreList","length","winnerPair","main","isActiveOverride","sub","filter","nav","isActive","map","Object","assign","flyout","linkList","link","hadAnyActiveLink","forEach","mainNav","score","compareRoutes","url","Infinity","push","_a","linklist","sort","a","b","baseUrl","matchMode","pathname","baseSegments","split","x","compareSegments","getSimilarityScore","Math","min","i","request","osFlyoutCache","getLocalizedConfig","async","projectId","environment","language","cookieKey","localStorageKey","localizedCustomConfig","osFlyoutOverrides","fetchConfig","lang","getUserLang","keys","undefined","Error","localizedConfig","header","navMain","mergeOsFlyoutOverrides","setMainNavigationIds","_b","persistLanguageChoice","id","JSON","parse","stringify","mainNavText","text","mainNavTitle","title","mainNavFlyout","col","index","overrides","slice","isValidProjectId","generateConfigUrl","res","fetch","json","message","parsedEnvironment","toLowerCase","isProd","host","encodeURIComponent","toString","test","getLocalizedCustomConfig","customConfig","navMainEntities","navMainEntity","uniqueId","postInternetHeaderCss","PostInternetHeader","state","currentLanguage","constructor","hostRef","this","lastScrollTop","scrollY","documentElement","scrollTop","lastWindowWidth","innerWidth","handleClickOutsideBound","handleClickOutside","bind","project","connectedCallback","throttledScroll","throttle","handleScrollEvent","debouncedResize","debounce","handleResize","addEventListener","passive","disconnectedCallback","removeEventListener","dispose","languageSwitchOverrides","languageCookieKey","languageLocalStorageKey","activeRoute","componentDidLoad","requestAnimationFrame","headerLoaded","emit","classList","add","newValue","handleAvailableLanguagesChage","handleSearchChange","search","handleLoginChange","login","handleMetaChange","meta","handleLanguageChangeEvent","event","handleLanguageChange","detail","activeDropdownElement","composedPath","includes","toggleDropdown","handleKeyUp","key","activeFlyout","st","stickyness","toggle","isMainNavOpen","handleDropdownToggled","open","element","setTimeout","setActiveFlyout","handleFlyoutToggled","toggleMobileDropdown","tagName","render","renderMetaNavigation","navMeta","isHomeLink","renderLogin","_c","isLoginWidgetHidden","loginWidgetOptions","renderLanguageSwitch","navLang","h","Host","class","packageJson","version","onKeyup","e","fullWidth","SvgSprite","If","condition","skiplinks","orientation","mode","onDropdownToggled","onClick","mobileMenu","SvgIcon","name","onFlyoutToggled","ref","el"],"sources":["./src/services/route.service.ts","./src/services/config.service.ts","./src/components/post-internet-header/post-internet-header.scss?tag=swisspost-internet-header&encapsulation=shadow","./src/components/post-internet-header/post-internet-header.tsx"],"sourcesContent":["import { ActiveRouteProp } from '../models/general.model';\r\nimport { NavMainEntity, MainNavScoreList } from '../models/header.model';\r\n\r\n/**\r\n * Activate the current route based on the config and the match mode\r\n * @param config Main Navigation Config\r\n * @param activeRouteProp Match mode\r\n * @returns Modified Main Navigation Config\r\n */\r\nexport const markActiveRoute = (\r\n  config: NavMainEntity[],\r\n  activeRouteProp: ActiveRouteProp,\r\n): NavMainEntity[] => {\r\n  // Don't highlight any route\r\n  if (activeRouteProp === false) {\r\n    return config;\r\n  }\r\n\r\n  // Set compare URL and check if activeRouteProp is valid\r\n  let compareUrl: URL;\r\n  config = resetOverrideConfig(config);\r\n\r\n  if (activeRouteProp === 'auto' || activeRouteProp === 'exact') {\r\n    // Check if an active route is already configured, set override to that and return\r\n    if (hasActivePortalRoute(config)) {\r\n      return resetActiveStateToPortalConfig(config);\r\n    }\r\n\r\n    compareUrl = new URL(window.location.href);\r\n  } else {\r\n    try {\r\n      compareUrl = new URL(activeRouteProp, document.location.origin);\r\n    } catch (error) {\r\n      console.warn(\r\n        `Active Route: ${activeRouteProp} is not a valid URL. Navigation highlighting has been disabled.`,\r\n      );\r\n      return config;\r\n    }\r\n  }\r\n\r\n  const scoreList = compileScoreList(config, compareUrl, activeRouteProp);\r\n\r\n  if (scoreList.length === 0) {\r\n    // No match found or already active links defined\r\n    return config;\r\n  }\r\n\r\n  const winnerPair = scoreList[0];\r\n  winnerPair.main.isActiveOverride = true;\r\n  if (winnerPair.sub) winnerPair.sub.isActiveOverride = true;\r\n\r\n  return config;\r\n};\r\n\r\n/**\r\n * Check if the portal config set any active route\r\n * @param config Main navigation config\r\n * @returns True if portal set any route as active\r\n */\r\nexport const hasActivePortalRoute = (config: NavMainEntity[]): boolean => {\r\n  return config.filter(nav => nav.isActive).length > 0;\r\n};\r\n\r\nexport const resetActiveStateToPortalConfig = (config: NavMainEntity[]): NavMainEntity[] => {\r\n  return config.map(nav => ({\r\n    ...nav,\r\n    isActiveOverride: nav.isActive,\r\n    flyout: nav.flyout.map(flyout => ({\r\n      ...flyout,\r\n      linkList: flyout.linkList.map(link => ({ ...link, isActiveOverride: link.isActive })),\r\n    })),\r\n  }));\r\n};\r\n\r\nconst resetOverrideConfig = (config: NavMainEntity[]): NavMainEntity[] => {\r\n  return config.map(nav => ({\r\n    ...nav,\r\n    isActiveOverride: false,\r\n    flyout: nav.flyout.map(flyout => ({\r\n      ...flyout,\r\n      linkList: flyout.linkList.map(link => ({ ...link, isActiveOverride: false })),\r\n    })),\r\n  }));\r\n};\r\n\r\n/**\r\n * Compile a list of scores based on the map mode, sorted in descending order\r\n * @param config Main Nav Config\r\n * @param compareUrl Current Browser URL or a custom URL\r\n * @param activeRouteProp Match mode\r\n * @returns A list of scored URLs if any matched\r\n */\r\nexport const compileScoreList = (\r\n  config: NavMainEntity[],\r\n  compareUrl: URL,\r\n  activeRouteProp: ActiveRouteProp,\r\n): MainNavScoreList => {\r\n  // Flag to check if the Portal set any active links or if there are any exact matches\r\n  let hadAnyActiveLink = false;\r\n  const scoreList: MainNavScoreList = [];\r\n\r\n  config.forEach(mainNav => {\r\n    if (hadAnyActiveLink || !mainNav) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const score = compareRoutes(\r\n        compareUrl,\r\n        new URL(mainNav.url),\r\n        activeRouteProp as 'auto' | 'exact',\r\n      );\r\n      if (score > 0) {\r\n        if (score === Infinity) hadAnyActiveLink = true;\r\n        scoreList.push({ main: mainNav, score });\r\n      }\r\n    } catch {\r\n      // Not a valid url, continue\r\n    }\r\n\r\n    // Loop through flyout links 2nd level\r\n    if (mainNav.flyout.length) {\r\n      mainNav.flyout.forEach(flyout => {\r\n        if (flyout.linkList) {\r\n          flyout.linkList.forEach(linklist => {\r\n            // Don't override if any link is already active\r\n            if (linklist.isActive && (activeRouteProp === 'auto' || activeRouteProp === 'exact')) {\r\n              hadAnyActiveLink = true;\r\n              return;\r\n            }\r\n\r\n            try {\r\n              const url = new URL(linklist.url);\r\n              const score = compareRoutes(compareUrl, url, activeRouteProp as 'auto' | 'exact');\r\n              if (score > 0) {\r\n                if (score === Infinity) hadAnyActiveLink = true;\r\n\r\n                // Push score\r\n                scoreList.push({\r\n                  main: mainNav,\r\n                  sub: linklist,\r\n                  score,\r\n                });\r\n              }\r\n            } catch {\r\n              // Not a valid URL, continue\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  return scoreList.sort((a, b) => b.score - a.score);\r\n};\r\n\r\n/**\r\n * Compare two URLs for similarity based on a match mode\r\n * @param baseUrl Browser URL\r\n * @param compareUrl Navigatgion URL\r\n * @param matchMode exact or auto matching\r\n * @returns Score\r\n */\r\nexport const compareRoutes = (\r\n  baseUrl: URL,\r\n  compareUrl: URL,\r\n  matchMode?: 'auto' | 'exact',\r\n): number => {\r\n  // One url is not defined or they don't share the same orign\r\n  if (!baseUrl || !compareUrl || baseUrl.origin !== compareUrl.origin) {\r\n    return 0;\r\n  }\r\n\r\n  // Exact match, origin and pathname are the same\r\n  if (baseUrl.pathname === compareUrl.pathname) {\r\n    return Infinity;\r\n  }\r\n\r\n  // The basepath is longer than the comparison, a match is impossible\r\n  if (baseUrl.pathname.length < compareUrl.pathname.length) {\r\n    return 0;\r\n  }\r\n\r\n  if (matchMode === 'auto') {\r\n    const baseSegments = [baseUrl.origin, ...baseUrl.pathname.split('/').filter(x => !!x)];\r\n    const compareSegments = [compareUrl.origin, ...compareUrl.pathname.split('/').filter(x => !!x)];\r\n\r\n    const score = getSimilarityScore(baseSegments, compareSegments);\r\n\r\n    // If only some segments match, but not the whole smaller array, it's not a match\r\n    return Math.min(baseSegments.length, compareSegments.length) === score ? score : 0;\r\n  }\r\n\r\n  return 0;\r\n};\r\n\r\n/**\r\n * Check how many items in an array match\r\n * @param a Base array\r\n * @param b Compare array\r\n * @returns Score\r\n */\r\nexport const getSimilarityScore = (a: string[], b: string[]): number => {\r\n  if (!a?.length || !b?.length) {\r\n    return 0;\r\n  }\r\n\r\n  let i = 0;\r\n  for (; i < Math.min(a.length, b.length); i++) {\r\n    if (a[i] !== b[i]) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  return i;\r\n};\r\n","import {\r\n  Environment,\r\n  IPortalConfig,\r\n  ILocalizedConfig,\r\n  ICustomConfig,\r\n  ILocalizedCustomConfig,\r\n  LocalizedConfigParameters,\r\n} from '../models/general.model';\r\nimport { NavMainEntity } from '../models/header.model';\r\nimport { getUserLang, persistLanguageChoice } from './language.service';\r\nimport { uniqueId } from '../utils/utils';\r\nimport { markActiveRoute } from './route.service';\r\n\r\n// Prevent double requests\r\nlet request: Promise<IPortalConfig> | null = null;\r\n\r\n// Cache the original os flyout to use it for updates\r\nlet osFlyoutCache: NavMainEntity | null = null;\r\n\r\n/**\r\n * Get a localized config object\r\n *\r\n * @param projectId String identifying the project\r\n * @param language [optional] Preferred language\r\n * @returns Localized config object\r\n */\r\nexport const getLocalizedConfig = async ({\r\n  projectId,\r\n  environment,\r\n  language,\r\n  cookieKey,\r\n  localStorageKey,\r\n  activeRouteProp,\r\n  localizedCustomConfig,\r\n  osFlyoutOverrides,\r\n}: LocalizedConfigParameters): Promise<ILocalizedConfig> => {\r\n  if (!request) {\r\n    request = fetchConfig(projectId, environment);\r\n  }\r\n\r\n  const config = await request;\r\n  const lang = getUserLang(Object.keys(config), language, localStorageKey, cookieKey);\r\n\r\n  if (lang === undefined) {\r\n    throw new Error('Internet Header: unable to determine current language');\r\n  }\r\n\r\n  // Clone config for more predictable state updates\r\n  let localizedConfig: ILocalizedConfig = { ...config[lang] };\r\n\r\n  // Merge custom config with portal config\r\n  if (localizedCustomConfig) {\r\n    const header = localizedCustomConfig?.header?.navMain\r\n      ? {\r\n          ...localizedConfig.header,\r\n          navMain: [...localizedConfig.header.navMain, ...localizedCustomConfig.header.navMain],\r\n        }\r\n      : localizedConfig.header;\r\n    localizedConfig = {\r\n      ...localizedConfig,\r\n      header,\r\n    };\r\n  }\r\n\r\n  // Add entries to flyout_os\r\n  if (osFlyoutOverrides)\r\n    localizedConfig.header.navMain = mergeOsFlyoutOverrides(localizedConfig, osFlyoutOverrides);\r\n\r\n  // Mark active route\r\n  if (activeRouteProp)\r\n    localizedConfig.header.navMain = markActiveRoute(\r\n      localizedConfig.header.navMain,\r\n      activeRouteProp,\r\n    );\r\n\r\n  setMainNavigationIds(localizedConfig?.header?.navMain);\r\n\r\n  // Set the new language choice\r\n  persistLanguageChoice(lang, cookieKey, localStorageKey);\r\n\r\n  return localizedConfig;\r\n};\r\n\r\n/**\r\n * Merge portal config with custom os flyout overrides\r\n * @param config Localized config\r\n * @param osFlyoutOverrides Overrides for the flyout\r\n * @returns Merged localized config\r\n */\r\nexport const mergeOsFlyoutOverrides = (\r\n  config: ILocalizedConfig,\r\n  osFlyoutOverrides: NavMainEntity,\r\n): NavMainEntity[] => {\r\n  if (!osFlyoutOverrides) return config.header.navMain;\r\n\r\n  return config.header.navMain.map(mainNav => {\r\n    if (mainNav.id !== 'flyout_os') return mainNav;\r\n\r\n    if (osFlyoutCache === null) {\r\n      osFlyoutCache = JSON.parse(JSON.stringify(mainNav)) as NavMainEntity;\r\n    }\r\n\r\n    const mainNavText = osFlyoutOverrides.text ?? osFlyoutCache.text;\r\n    const mainNavTitle = osFlyoutOverrides.title ?? osFlyoutCache.title;\r\n\r\n    if (\r\n      !osFlyoutCache.flyout ||\r\n      osFlyoutCache.flyout.length === 0 ||\r\n      !osFlyoutOverrides.flyout ||\r\n      osFlyoutOverrides.flyout.length === 0\r\n    )\r\n      return {\r\n        ...mainNav,\r\n        title: mainNavTitle,\r\n        text: mainNavText,\r\n      };\r\n\r\n    // Add entries for os flyout columns without overriding existing config\r\n    const mainNavFlyout = [\r\n      ...osFlyoutCache.flyout.map((col, index) => {\r\n        const overrides = osFlyoutOverrides.flyout[index];\r\n        const title = overrides.title ?? col.title;\r\n\r\n        const linkList = overrides.linkList ? osFlyoutOverrides.flyout[index].linkList : [];\r\n\r\n        return {\r\n          title,\r\n          linkList: [...col.linkList, ...linkList],\r\n        };\r\n      }),\r\n      ...osFlyoutOverrides.flyout.slice(osFlyoutCache.flyout.length),\r\n    ];\r\n\r\n    return {\r\n      ...mainNav,\r\n      text: mainNavText,\r\n      title: mainNavTitle,\r\n      flyout: mainNavFlyout,\r\n    } as NavMainEntity;\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch the general config based on project id\r\n *\r\n * @returns Promise for Post Portal general config\r\n */\r\nexport const fetchConfig = async (\r\n  projectId: string,\r\n  environment: Environment,\r\n): Promise<IPortalConfig> => {\r\n  // Check if project id is sanitized\r\n  if (!isValidProjectId(projectId)) {\r\n    throw new Error(`Internet Header: invalid project id \"${projectId}\"`);\r\n  }\r\n\r\n  if (projectId === 'test') {\r\n    environment = 'int01';\r\n  }\r\n\r\n  let url = generateConfigUrl(projectId, environment);\r\n\r\n  // Get the config if cache is invalid\r\n  try {\r\n    const res = await fetch(url);\r\n    return (await res.json()) as IPortalConfig;\r\n  } catch (error) {\r\n    throw new Error(`Internet Header: fetching config failed. ${error.message}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Generate an URL with all necessary query params to get the configuration.\r\n * Project id \"test\" will return a test configuration\r\n * @param projectId string\r\n * @param environment int01, int02 or prod\r\n * @returns URL pointing to the project config\r\n */\r\nexport const generateConfigUrl = (projectId: string, environment: Environment): string => {\r\n  if (projectId === 'test') return 'assets/config/test-configuration.json';\r\n\r\n  const parsedEnvironment = environment.toLowerCase();\r\n  const isProd = parsedEnvironment === 'prod';\r\n  const host = `https://${isProd ? 'www' : 'int'}.post.ch`;\r\n  try {\r\n    // Use URL to validate the generated URL\r\n    return new URL(\r\n      `${host}/api/headerjs/Json?serviceid=${encodeURIComponent(projectId)}${\r\n        !isProd ? '&environment=' + parsedEnvironment : ''\r\n      }`,\r\n    ).toString();\r\n  } catch (error) {\r\n    throw new Error(`Internet Header: Config URL is invalid.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Check if project id contains only URL safe characters\r\n *\r\n * @param projectId Project Id string\r\n * @returns The valid project id\r\n */\r\nexport const isValidProjectId = (projectId: string): boolean => {\r\n  return projectId !== '' && projectId.length > 0 && /^[a-zA-Z][\\w-]*[a-zA-Z0-9]$/.test(projectId);\r\n};\r\n\r\n/**\r\n * Get the localized config object from a custom config\r\n *\r\n * @param config String or json object of the custom config\r\n * @param language Specific language\r\n * @returns Localized custom config object\r\n */\r\nexport const getLocalizedCustomConfig = (\r\n  config: string | ICustomConfig,\r\n  language: string,\r\n): ILocalizedCustomConfig | undefined => {\r\n  let customConfig: ICustomConfig;\r\n  try {\r\n    customConfig = typeof config === 'string' ? JSON.parse(config) : config;\r\n  } catch (error) {\r\n    throw new Error(\r\n      `Internet Header: Custom config is invalid. Make sure your custom config contains valid JSON syntax and matches the definition. `,\r\n    );\r\n  }\r\n  let localizedCustomConfig: ILocalizedCustomConfig | undefined = customConfig[language];\r\n  if (localizedCustomConfig?.header?.navMain)\r\n    setMainNavigationIds(localizedCustomConfig.header.navMain);\r\n  return localizedCustomConfig;\r\n};\r\n\r\n/**\r\n * Check if mobile header styles are applied or not\r\n * @returns True if browser is smaller than 1024px\r\n */\r\nexport const isMobile = () => window.innerWidth < 1024;\r\n\r\n/**\r\n * Set unique ID's on main navigation entities but conserve flyout_os to be able to\r\n * identify the online-service flyout, which can be configured by osFlyoutOverrides\r\n */\r\nexport const setMainNavigationIds = (navMainEntities: NavMainEntity[]): void => {\r\n  navMainEntities.forEach(navMainEntity => {\r\n    navMainEntity.id = navMainEntity.id === 'flyout_os' ? navMainEntity.id : uniqueId('main-nav-');\r\n  });\r\n};\r\n","@use '@swisspost/design-system-styles/variables/color';\r\n@use '../../utils/utils.scss';\r\n@use '../../utils/mixins.scss';\r\n\r\n:host {\r\n  display: block;\r\n  position: relative;\r\n  font-size: 1rem;\r\n  font-weight: 300;\r\n  z-index: var(--header-z-index, 10);\r\n\r\n  --header-height: 3.5rem; // 56px\r\n  --meta-header-height: 0px; // Not visible on mobile\r\n  --language-dropdown-margin-top: 0px;\r\n\r\n  @include mixins.min(lg) {\r\n    --meta-header-height: 3rem; // 48px\r\n    --header-height: 4rem; // 64px\r\n  }\r\n\r\n  @include mixins.min(xl) {\r\n    --header-height: 4.5rem; // 72px\r\n  }\r\n}\r\n\r\n// Set height to 0 if meta is never visible\r\n:host([meta='false']) {\r\n  --meta-header-height: 0px;\r\n  // Compensation for header border-bottom, when language dropdown is displayed within main navigation controls\r\n  --language-dropdown-margin-top: 1px;\r\n}\r\n\r\n// Support different kinds of stickyness modes\r\n// Works only in combination with setting header heights dynamically\r\n@supports (position: sticky) {\r\n  // If stickyness is none, simply apply no styles, all others are sticky\r\n  :host(:not(.stickyness-none)) {\r\n    position: sticky;\r\n  }\r\n\r\n  // Everything is always sticky\r\n  :host(.stickyness-full) {\r\n    top: 0;\r\n  }\r\n\r\n  // Only main nav is sticky\r\n  :host(.stickyness-main) {\r\n    top: calc(var(--meta-header-height, 0px) * -1);\r\n  }\r\n\r\n  // Hide everything\r\n  :host(.stickyness-minimal) {\r\n    top: calc((var(--header-height, 0px) + var(--meta-header-height, 0px)) * -1);\r\n    transition: top 200ms ease-in;\r\n  }\r\n\r\n  // Show main when scrolling up or any of the menus are open\r\n  :host(.stickyness-minimal.scrolling-up),\r\n  :host(.stickyness-minimal.dropdown-open) {\r\n    top: calc(var(--meta-header-height, 0px) * -1);\r\n    transition: top 200ms ease-out;\r\n  }\r\n}\r\n\r\n.post-internet-header {\r\n  border-bottom: 1px solid color.$gray-10;\r\n  background-color: white;\r\n}\r\n\r\n.main-navigation-container {\r\n  display: flex;\r\n\r\n  & > .main-navigation-controls {\r\n    flex: 0 0 auto;\r\n  }\r\n}\r\n\r\n.main-navigation {\r\n  display: flex;\r\n}\r\n\r\n.sub-navigation-container {\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  width: 100%;\r\n  display: flex;\r\n  background: white;\r\n  visibility: hidden;\r\n}\r\n\r\n.main-navigation-item:hover .sub-navigation-container {\r\n  visibility: visible;\r\n}\r\n\r\n.main-navigation-controls {\r\n  display: flex;\r\n  margin-left: auto;\r\n\r\n  @include mixins.max(lg) {\r\n    font-weight: 400;\r\n  }\r\n\r\n  @include mixins.min(lg) {\r\n    font-size: 1.0625rem;\r\n  }\r\n\r\n  & > * {\r\n    border-left: 1px solid color.$gray-10;\r\n  }\r\n}\r\n\r\n.menu-button {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 calc(1rem - 1px);\r\n  font-weight: 300;\r\n  cursor: pointer;\r\n  border-left: 1px solid color.$gray-10;\r\n  order: 1; /* Display on the far right because of tab order */\r\n\r\n  @include mixins.min(lg) {\r\n    display: none;\r\n  }\r\n\r\n  .visually-hidden {\r\n    @include mixins.between(rg, lg) {\r\n      @include mixins.reset-visually-hidden();\r\n\r\n      margin-right: 0.5rem;\r\n    }\r\n  }\r\n\r\n  svg {\r\n    width: 1.5rem;\r\n    height: 1.5rem;\r\n  }\r\n}\r\n\r\n.full-width {\r\n  .wide-container {\r\n    max-width: none;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Host,\r\n  Element,\r\n  h,\r\n  State,\r\n  Prop,\r\n  Watch,\r\n  Listen,\r\n  EventEmitter,\r\n  Event,\r\n  Method,\r\n} from '@stencil/core';\r\nimport { debounce, throttle } from 'throttle-debounce';\r\nimport {\r\n  getLocalizedConfig,\r\n  getLocalizedCustomConfig,\r\n  isValidProjectId,\r\n} from '../../services/config.service';\r\nimport { state, dispose } from '../../data/store';\r\nimport { DropdownElement, DropdownEvent, NavMainEntity } from '../../models/header.model';\r\nimport { SvgSprite } from '../../utils/svg-sprite.component';\r\nimport { SvgIcon } from '../../utils/svg-icon.component';\r\nimport { StickynessOptions } from '../../models/implementor.model';\r\nimport { ActiveRouteProp, Environment, ICustomConfig } from '../../models/general.model';\r\nimport { IAvailableLanguage } from '../../models/language.model';\r\nimport { If } from '../../utils/if.component';\r\nimport packageJson from '../../../package.json';\r\n\r\n@Component({\r\n  tag: 'swisspost-internet-header',\r\n  styleUrl: 'post-internet-header.scss',\r\n  shadow: true,\r\n})\r\nexport class PostInternetHeader {\r\n  /**\r\n   * Your project id, previously passed as query string parameter serviceId.\r\n   */\r\n  @Prop() project: string;\r\n\r\n  /**\r\n   * Sticky behaviour of the header.\r\n   */\r\n  @Prop() stickyness: StickynessOptions = 'minimal';\r\n\r\n  /**\r\n   * Initial language to be used. Overrides automatic language detection.\r\n   */\r\n  @Prop() language?: string;\r\n\r\n  /**\r\n   * Toggle the meta navigation.\r\n   */\r\n  @Prop() meta: boolean = true;\r\n\r\n  /**\r\n   * Toggle the login link (when logged out) or the user widget (when logged in).\r\n   */\r\n  @Prop() login: boolean = true;\r\n\r\n  /**\r\n   * Toggle the search button.\r\n   */\r\n  @Prop() search: boolean = true;\r\n\r\n  /**\r\n   * Toggle skiplinks. They help keyboard users to quickly jump to important sections of the page.\r\n   */\r\n  @Prop() skiplinks: boolean = true;\r\n\r\n  /**\r\n   * DEPRECATED!: Define a proxy URL for the config fetch request. Will be removed in the next major version\r\n   */\r\n  @Prop() configProxy?: string;\r\n\r\n  /**\r\n   * Target environment. Choose 'int01' for local testing.\r\n   */\r\n  @Prop() environment: Environment = 'prod';\r\n\r\n  /**\r\n   * Override the language switch links with custom URLs. Helpful when your application contains sub-pages and you\r\n   * would like to stay on subpages when the user changes language.\r\n   */\r\n  @Prop() languageSwitchOverrides?: string | IAvailableLanguage[];\r\n\r\n  /**\r\n   * Customize the header config loaded from the post portal.\r\n   */\r\n  @Prop() customConfig?: string | ICustomConfig;\r\n\r\n  /**\r\n   * The header uses this cookie to set the language. Disables automatic language detection.\r\n   */\r\n  @Prop() languageCookieKey?: string;\r\n\r\n  /**\r\n   * The header uses this local storage key to set the language. Disables automatic language selection.\r\n   */\r\n  @Prop() languageLocalStorageKey?: string = 'swisspost-internet-header-language';\r\n\r\n  /**\r\n   * Set the currently activated route. If there is a link matching this URL in the header, it will be highlighted.\r\n   * Will also highlight partly matching URLs. When set to auto, will use current location.href for comparison.\r\n   */\r\n  @Prop() activeRoute?: 'auto' | false | string = 'auto';\r\n\r\n  /**\r\n   * Online Services only: Add custom links to the special online service navigation entry\r\n   */\r\n  @Prop() osFlyoutOverrides?: string | NavMainEntity;\r\n\r\n  /**\r\n   * Displays the header at full width for full-screen applications\r\n   */\r\n  @Prop() fullWidth?: boolean = false;\r\n\r\n  /**\r\n   * Fires when the header has been rendered to the page.\r\n   */\r\n  @Event() headerLoaded: EventEmitter<void>;\r\n\r\n  @State() activeFlyout: string | null = null;\r\n  @State() activeDropdownElement: DropdownElement | null = null;\r\n  @Element() host: HTMLElement;\r\n\r\n  /**\r\n   * Get the currently set language as a two letter string (\"de\", \"fr\" \"it\" or \"en\")\r\n   * @returns string\r\n   */\r\n  @Method()\r\n  async getCurrentLanguage(): Promise<'de' | 'fr' | 'it' | 'en' | string> {\r\n    return state.currentLanguage ?? 'de';\r\n  }\r\n\r\n  private mainNav?: HTMLPostMainNavigationElement;\r\n  private lastScrollTop = window.scrollY || document.documentElement.scrollTop;\r\n  private throttledScroll: throttle<() => void>;\r\n  private debouncedResize: debounce<() => void>;\r\n  private lastWindowWidth: number = window.innerWidth;\r\n\r\n  constructor() {\r\n    if (this.project === undefined || this.project === '' || !isValidProjectId(this.project)) {\r\n      throw new Error(\r\n        `Internet Header project key is \"${this.project}\". Please provide a valid project key.`,\r\n      );\r\n    }\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.throttledScroll = throttle(300, () => this.handleScrollEvent());\r\n    this.debouncedResize = debounce(200, () => this.handleResize());\r\n    window.addEventListener('scroll', this.throttledScroll, { passive: true });\r\n    window.addEventListener('resize', this.debouncedResize, { passive: true });\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    window.removeEventListener('scroll', this.throttledScroll);\r\n    window.removeEventListener('resize', this.debouncedResize);\r\n\r\n    // Reset the store to its original state\r\n    dispose();\r\n  }\r\n\r\n  async componentWillLoad() {\r\n    // Wait for the config to arrive, then render the header\r\n    try {\r\n      state.projectId = this.project;\r\n      state.environment = this.environment;\r\n      if (this.language !== undefined) state.currentLanguage = this.language;\r\n      state.languageSwitchOverrides =\r\n        typeof this.languageSwitchOverrides === 'string'\r\n          ? JSON.parse(this.languageSwitchOverrides)\r\n          : this.languageSwitchOverrides;\r\n      state.osFlyoutOverrides =\r\n        typeof this.osFlyoutOverrides === 'string'\r\n          ? JSON.parse(this.osFlyoutOverrides)\r\n          : this.osFlyoutOverrides;\r\n\r\n      if (this.customConfig !== undefined && state.currentLanguage !== null) {\r\n        state.localizedCustomConfig = getLocalizedCustomConfig(\r\n          this.customConfig,\r\n          state.currentLanguage,\r\n        );\r\n      }\r\n\r\n      state.localizedConfig = await getLocalizedConfig({\r\n        projectId: this.project,\r\n        environment: this.environment,\r\n        language: this.language,\r\n        cookieKey: this.languageCookieKey,\r\n        localStorageKey: this.languageLocalStorageKey,\r\n        activeRouteProp: this.activeRoute,\r\n        localizedCustomConfig: state.localizedCustomConfig,\r\n        osFlyoutOverrides: state.osFlyoutOverrides,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    window.requestAnimationFrame(() => {\r\n      this.handleResize();\r\n      this.headerLoaded.emit();\r\n      this.host.classList.add('header-loaded');\r\n    });\r\n  }\r\n\r\n  @Watch('language')\r\n  async handleLanguageChange(newValue: string) {\r\n    state.currentLanguage = newValue;\r\n    state.localizedConfig = await getLocalizedConfig({\r\n      projectId: this.project,\r\n      environment: this.environment,\r\n      language: newValue,\r\n      cookieKey: this.languageCookieKey,\r\n      localStorageKey: this.languageLocalStorageKey,\r\n      activeRouteProp: this.activeRoute,\r\n      localizedCustomConfig: state.localizedCustomConfig,\r\n      osFlyoutOverrides: state.osFlyoutOverrides,\r\n    });\r\n    if (this.customConfig)\r\n      state.localizedCustomConfig = getLocalizedCustomConfig(this.customConfig, newValue);\r\n  }\r\n\r\n  @Watch('languageSwitchOverrides')\r\n  handleAvailableLanguagesChage(newValue: string | IAvailableLanguage[]) {\r\n    state.languageSwitchOverrides = typeof newValue === 'string' ? JSON.parse(newValue) : newValue;\r\n  }\r\n\r\n  @Watch('osFlyoutOverrides')\r\n  async handleOsFlyoutOverrides(newValue: string | NavMainEntity) {\r\n    state.osFlyoutOverrides = typeof newValue === 'string' ? JSON.parse(newValue) : newValue;\r\n    state.localizedConfig = await getLocalizedConfig({\r\n      projectId: this.project,\r\n      environment: this.environment,\r\n      language: this.language,\r\n      cookieKey: this.languageCookieKey,\r\n      localStorageKey: this.languageLocalStorageKey,\r\n      activeRouteProp: this.activeRoute,\r\n      localizedCustomConfig: state.localizedCustomConfig,\r\n      osFlyoutOverrides: state.osFlyoutOverrides,\r\n    });\r\n  }\r\n\r\n  @Watch('activeRoute')\r\n  async handleActiveRouteChange(newValue: string | ActiveRouteProp) {\r\n    state.localizedConfig = await getLocalizedConfig({\r\n      projectId: this.project,\r\n      environment: this.environment,\r\n      language: this.language,\r\n      cookieKey: this.languageCookieKey,\r\n      localStorageKey: this.languageLocalStorageKey,\r\n      activeRouteProp: newValue,\r\n      localizedCustomConfig: state.localizedCustomConfig,\r\n      osFlyoutOverrides: state.osFlyoutOverrides,\r\n    });\r\n  }\r\n\r\n  @Watch('customConfig')\r\n  async handleCustomConfigChange(newValue: string | ICustomConfig) {\r\n    if (this.language === undefined) return;\r\n    const localizedCustomConfig = getLocalizedCustomConfig(newValue, this.language);\r\n    state.localizedCustomConfig = localizedCustomConfig;\r\n    state.localizedConfig = await getLocalizedConfig({\r\n      projectId: this.project,\r\n      environment: this.environment,\r\n      language: this.language,\r\n      cookieKey: this.languageCookieKey,\r\n      localStorageKey: this.languageLocalStorageKey,\r\n      activeRouteProp: this.activeRoute,\r\n      localizedCustomConfig: localizedCustomConfig,\r\n      osFlyoutOverrides: state.osFlyoutOverrides,\r\n    });\r\n  }\r\n\r\n  @Watch('search')\r\n  handleSearchChange(newValue: boolean) {\r\n    state.search = newValue;\r\n  }\r\n\r\n  @Watch('login')\r\n  handleLoginChange(newValue: boolean) {\r\n    state.login = newValue;\r\n  }\r\n\r\n  @Watch('meta')\r\n  handleMetaChange(newValue: boolean) {\r\n    state.meta = newValue;\r\n  }\r\n\r\n  @Listen('languageChanged')\r\n  handleLanguageChangeEvent(event: CustomEvent<string>) {\r\n    this.handleLanguageChange(event.detail);\r\n  }\r\n\r\n  private handleClickOutsideBound = this.handleClickOutside.bind(this);\r\n\r\n  private handleClickOutside(event: Event) {\r\n    // Close active dropdown element on click outside of it\r\n    if (this.activeDropdownElement && !event.composedPath().includes(this.activeDropdownElement)) {\r\n      this.activeDropdownElement.toggleDropdown(false);\r\n    }\r\n  }\r\n\r\n  private handleKeyUp(event: KeyboardEvent) {\r\n    if (event.key === 'Escape') {\r\n      if (this.activeDropdownElement) {\r\n        this.activeDropdownElement.toggleDropdown(false);\r\n      }\r\n      if (this.activeFlyout !== null && this.mainNav) {\r\n        this.mainNav.toggleDropdown(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleScrollEvent() {\r\n    // Credits: \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\r\n    const st = window.scrollY || document.documentElement.scrollTop;\r\n\r\n    // Toggle class without re-rendering the component if stickyness is minimal\r\n    // the other stickyness modes do not need the class\r\n    if (this.stickyness === 'minimal') {\r\n      this.host.classList.toggle('scrolling-up', st <= this.lastScrollTop);\r\n    }\r\n\r\n    // For Mobile or negative scrolling\r\n    this.lastScrollTop = st <= 0 ? 0 : st;\r\n  }\r\n\r\n  private handleResize() {\r\n    // Close main navigation dropdown if size changed to bigger than 1024px (search dropdown will be kept open)\r\n    if (this.isMainNavOpen() && this.lastWindowWidth < 1024 && window.innerWidth >= 1024) {\r\n      this.activeDropdownElement?.toggleDropdown(false);\r\n    }\r\n\r\n    this.lastWindowWidth = window.innerWidth;\r\n  }\r\n\r\n  /**\r\n   * Close open dropdown menus if another is being opened\r\n   *\r\n   * @param event Dropdown toggled event\r\n   * @returns void\r\n   */\r\n  private handleDropdownToggled(event: CustomEvent<DropdownEvent>) {\r\n    if (!event.detail.open && this.activeDropdownElement !== event.detail.element) {\r\n      // Some dropdown got closed programmatically (possibly by this function). To prevent\r\n      // a circle or an outdated state, we'll not handle this event\r\n      return;\r\n    }\r\n\r\n    if (event.detail.open === true) {\r\n      if (this.activeDropdownElement) {\r\n        this.activeDropdownElement.toggleDropdown(false);\r\n      }\r\n\r\n      this.activeDropdownElement = event.detail.element;\r\n\r\n      if (window.innerWidth >= 1024) {\r\n        // Add event listener to close active dropdown element on click outsite of it\r\n        // Also adds 10ms delay in case of an external interaction:\r\n        //    Some button on the page calls toggleDropdown() -> dropdown opens\r\n        //    Click event bubbles to the window, this.handleClickOutsideBound closes dropdown again\r\n        window.setTimeout(() => {\r\n          window.addEventListener('click', this.handleClickOutsideBound);\r\n        }, 10);\r\n      }\r\n\r\n      if (this.activeFlyout !== null && this.mainNav) {\r\n        this.mainNav.setActiveFlyout(null);\r\n      }\r\n    } else {\r\n      this.activeDropdownElement = null;\r\n\r\n      // Remove event listener as it is not needed if no dropdown element is active\r\n      window.removeEventListener('click', this.handleClickOutsideBound);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close open dropdowns if the flyout is being opened\r\n   * @param event Flyout toggle event\r\n   */\r\n  private handleFlyoutToggled(event: CustomEvent<string | null>) {\r\n    this.activeFlyout = event.detail;\r\n\r\n    if (this.activeDropdownElement && event.detail && !this.isMainNavOpen()) {\r\n      this.activeDropdownElement.toggleDropdown(false);\r\n    }\r\n  }\r\n\r\n  private toggleMobileDropdown() {\r\n    this.mainNav?.toggleDropdown();\r\n  }\r\n\r\n  private isMainNavOpen() {\r\n    return (\r\n      this.activeDropdownElement && this.activeDropdownElement.tagName === 'POST-MAIN-NAVIGATION'\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (!state.localizedConfig?.header) {\r\n      console.error(new Error('Internet Header: Config cannot be loaded'));\r\n      return;\r\n    }\r\n\r\n    const config = state.localizedConfig;\r\n    const renderMetaNavigation =\r\n      this.meta &&\r\n      config.header.navMeta !== undefined &&\r\n      config.header.navMeta?.filter(meta => !meta.isHomeLink).length > 0;\r\n    const renderLogin =\r\n      (this.login ?? !config.header.isLoginWidgetHidden) && config.header.loginWidgetOptions;\r\n    const renderLanguageSwitch = config.header.navLang.length > 1;\r\n\r\n    return (\r\n      <Host\r\n        class={`stickyness-${this.stickyness} ${\r\n          this.activeDropdownElement || this.activeFlyout ? 'dropdown-open' : ''\r\n        }`}\r\n        data-version={packageJson.version}\r\n        onKeyup={(e: KeyboardEvent) => this.handleKeyUp(e)}\r\n      >\r\n        <header class={`post-internet-header${this.fullWidth ? ' full-width' : ''}`}>\r\n          <SvgSprite />\r\n          <If condition={this.skiplinks === true}>\r\n            <post-skiplinks></post-skiplinks>\r\n          </If>\r\n          <If condition={renderMetaNavigation === true}>\r\n            <post-meta-navigation\r\n              orientation=\"horizontal\"\r\n              class=\"hidden-lg\"\r\n              full-width={this.fullWidth}\r\n            >\r\n              <If condition={renderLanguageSwitch === true}>\r\n                <post-language-switch\r\n                  id=\"post-language-switch-desktop\"\r\n                  mode=\"dropdown\"\r\n                  onDropdownToggled={e => this.handleDropdownToggled(e)}\r\n                ></post-language-switch>\r\n              </If>\r\n            </post-meta-navigation>\r\n          </If>\r\n          <div class=\"main-navigation-container wide-container\">\r\n            <post-logo></post-logo>\r\n            <button class=\"menu-button nav-link\" onClick={() => this.toggleMobileDropdown()}>\r\n              <span class=\"menu-button-text visually-hidden\">{config.header.mobileMenu.text}</span>\r\n              <SvgIcon name={this.isMainNavOpen() ? 'pi-close' : 'pi-menu'}></SvgIcon>\r\n            </button>\r\n            <post-main-navigation\r\n              onDropdownToggled={e => this.handleDropdownToggled(e)}\r\n              onFlyoutToggled={e => this.handleFlyoutToggled(e)}\r\n              ref={el => (this.mainNav = el)}\r\n            >\r\n              <If condition={renderMetaNavigation === true}>\r\n                <post-meta-navigation orientation=\"vertical\">\r\n                  <If condition={renderLanguageSwitch === true}>\r\n                    <post-language-switch\r\n                      id=\"post-language-switch-mobile\"\r\n                      mode=\"list\"\r\n                    ></post-language-switch>\r\n                  </If>\r\n                </post-meta-navigation>\r\n              </If>\r\n            </post-main-navigation>\r\n            <div class=\"main-navigation-controls\">\r\n              <If condition={this.search !== false}>\r\n                <post-search onDropdownToggled={e => this.handleDropdownToggled(e)}></post-search>\r\n              </If>\r\n              <If condition={!!renderLogin}>\r\n                <post-klp-login-widget>\r\n                  <slot name=\"login-widget\"></slot>\r\n                </post-klp-login-widget>\r\n              </If>\r\n              <If condition={renderMetaNavigation === false && renderLanguageSwitch === true}>\r\n                <post-language-switch\r\n                  id=\"post-language-switch-no-meta\"\r\n                  onDropdownToggled={e => this.handleDropdownToggled(e)}\r\n                  mode=\"dropdown\"\r\n                ></post-language-switch>\r\n              </If>\r\n              <slot name=\"main\"></slot>\r\n            </div>\r\n          </div>\r\n        </header>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}