{"version":3,"names":["PostLanguageSwitchList","props","h","class","ref","e","dropdownRef","translate","navLang","filter","lang","isCurrent","map","TagName","url","key","onClick","switchLanguage","href","title","text","postLanguageSwitchCss","PostLanguageSwitch","componentWillUpdate","this","languageSwitchDropdown","langSwitchOpen","mode","classList","remove","elementHasTransition","userPrefersReducedMotion","Promise","resolve","_a","addEventListener","event","propertyName","componentDidUpdate","getBoundingClientRect","add","async","force","dropdownToggled","emit","open","element","host","newLang","languageChanged","toggleDropdown","getMergedLanguageConfig","config","overrides","undefined","langConfig","Object","assign","find","l","setDropdownRef","render","state","localizedConfig","header","mergedConfig","languageSwitchOverrides","Host","SvgSprite","translations","navLangAriaLabel","currentLanguage","SvgIcon","name","classNames"],"sources":["./src/components/post-language-switch/components/post-language-switch-list.tsx","./src/components/post-language-switch/post-language-switch.scss?tag=post-language-switch&encapsulation=shadow","./src/components/post-language-switch/post-language-switch.tsx"],"sourcesContent":["import { h } from '@stencil/core';\r\nimport { NavLangEntity } from '../../../models/header.model';\r\nimport { translate } from '../../../services/language.service';\r\n\r\nexport const PostLanguageSwitchList = (props: {\r\n  navLang: NavLangEntity[];\r\n  switchLanguage: (lang: NavLangEntity) => void;\r\n  dropdownRef: (element: HTMLElement | undefined) => void;\r\n}) => (\r\n  <nav class=\"language-switch-dropdown\" ref={e => props.dropdownRef(e)}>\r\n    <h3 class=\"visually-hidden\">{translate('Change language')}</h3>\r\n    <ul>\r\n      {props.navLang\r\n        .filter(lang => !lang.isCurrent)\r\n        .map(lang => {\r\n          const TagName = lang.url === null ? 'button' : 'a';\r\n          return (\r\n            <li key={lang.lang}>\r\n              <TagName\r\n                onClick={() => props.switchLanguage(lang)}\r\n                href={lang.url}\r\n                lang={lang.lang}\r\n                title={lang.title}\r\n              >\r\n                <span class=\"visually-hidden\">{lang.title}</span>\r\n                <span aria-hidden=\"true\">{lang.text}</span>\r\n              </TagName>\r\n            </li>\r\n          );\r\n        })}\r\n    </ul>\r\n  </nav>\r\n);\r\n","@use \"@swisspost/design-system-styles/variables/color\";\r\n@use \"@swisspost/design-system-styles/functions\";\r\n@use \"../../utils/utils.scss\";\r\n\r\n:host {\r\n  --separator-display: none;\r\n  --separator-height: 100%;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  align-self: stretch;\r\n\r\n  &::before {\r\n    display: var(--separator-display);\r\n    height: var(--separator-height);\r\n    border-left: 1px solid color.$gray-10;\r\n    content: '';\r\n  }\r\n}\r\n\r\n.lang-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100%;\r\n  padding: 0 1rem;\r\n  border: none;\r\n  box-shadow: none;\r\n  background: none;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  color: rgba(color.$black, 0.8);\r\n\r\n  &:hover,\r\n  &:focus {\r\n    color: black;\r\n  }\r\n\r\n  svg {\r\n    width: 1.5em;\r\n    height: 1.5em;\r\n    transition: transform 250ms;\r\n\r\n    &.rotated {\r\n      transform: rotate(180deg);\r\n    }\r\n  }\r\n}\r\n\r\n.language-switch {\r\n  position: relative;\r\n  align-self: stretch;\r\n  height: 100%;\r\n\r\n  &.list {\r\n    margin-top: 1.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n}\r\n\r\n.current-language {\r\n  text-transform: uppercase;\r\n  border-right: 1px solid color.$gray-20;\r\n  padding: 0.5rem 1rem 0.5rem 0;\r\n}\r\n\r\n.language-switch-dropdown {\r\n  .dropdown & {\r\n    position: absolute;\r\n    top: 100%;\r\n    width: 100%;\r\n    background: white;\r\n    box-shadow: 0 1px 2px rgb(0 0 0 / 20%), 0 2px 6px 2px rgb(0 0 0 / 10%);\r\n    z-index: 1;\r\n    transform: scale(0.1);\r\n    transform-origin: center top;\r\n    transition: transform 0.1s;\r\n    margin-top: var(--language-dropdown-margin-top);\r\n\r\n    @media (prefers-reduced-motion: reduce) {\r\n      transition: none;\r\n    }\r\n\r\n    &.open {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n\r\n  ul {\r\n    @extend %no-list;\r\n\r\n    .list & {\r\n      display: flex;\r\n\r\n      > li + li {\r\n        border-left: 1px solid color.$gray-20;\r\n      }\r\n    }\r\n  }\r\n\r\n  a,\r\n  button {\r\n    @extend %nav-link;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 100%;\r\n    height: functions.px-to-rem(48px);\r\n    padding: 0 0.25rem;\r\n    text-transform: uppercase;\r\n    cursor: pointer;\r\n    transition: background-color 200ms, color 200ms;\r\n\r\n    &:hover,\r\n    &:focus {\r\n      background: color.$gray-background;\r\n    }\r\n\r\n    span {\r\n      // Worst case scenario\r\n      overflow: hidden;\r\n      white-space: nowrap;\r\n      text-overflow: ellipsis;\r\n    }\r\n\r\n    .list & {\r\n      color: black;\r\n      height: auto;\r\n      padding: 0.5rem 1rem;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Event,\r\n  Host,\r\n  h,\r\n  Method,\r\n  EventEmitter,\r\n  State,\r\n  Prop,\r\n  Element,\r\n} from '@stencil/core';\r\nimport { SvgSprite } from '../../utils/svg-sprite.component';\r\nimport { SvgIcon } from '../../utils/svg-icon.component';\r\nimport { state } from '../../data/store';\r\nimport {\r\n  DropdownElement,\r\n  DropdownEvent,\r\n  HasDropdown,\r\n  NavLangEntity,\r\n} from '../../models/header.model';\r\nimport { userPrefersReducedMotion, elementHasTransition } from '../../services/ui.service';\r\nimport { translate } from '../../services/language.service';\r\nimport { PostLanguageSwitchList } from './components/post-language-switch-list';\r\nimport { IAvailableLanguage } from '../../models/language.model';\r\n\r\n@Component({\r\n  tag: 'post-language-switch',\r\n  styleUrl: 'post-language-switch.scss',\r\n  shadow: true,\r\n})\r\nexport class PostLanguageSwitch implements HasDropdown {\r\n  @Prop() mode: 'dropdown' | 'list';\r\n  @State() langSwitchOpen = false;\r\n  @Element() host: DropdownElement;\r\n  @Event() dropdownToggled: EventEmitter<DropdownEvent>;\r\n  @Event({ bubbles: true }) languageChanged: EventEmitter<string>;\r\n  private languageSwitchDropdown: HTMLElement | undefined;\r\n\r\n  componentWillUpdate() {\r\n    // Check if language switch got set to close and if mode is dropdown\r\n    if (this.languageSwitchDropdown && !this.langSwitchOpen && this.mode == 'dropdown') {\r\n      this.languageSwitchDropdown.classList.remove('open');\r\n\r\n      // Check if element has transition applied and whether user prefers to see animations or not\r\n      if (\r\n        elementHasTransition(this.languageSwitchDropdown, 'transform') &&\r\n        !userPrefersReducedMotion()\r\n      ) {\r\n        // Wait for CSS transition 'transform' to end before continuing\r\n        return new Promise<boolean>(resolve => {\r\n          this.languageSwitchDropdown?.addEventListener('transitionend', event => {\r\n            if (event.propertyName === 'transform') {\r\n              resolve(true);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Language switch got set to open\r\n    if (this.languageSwitchDropdown && this.langSwitchOpen) {\r\n      // Force browser to redraw/refresh DOM before adding 'open' class\r\n      this.languageSwitchDropdown.getBoundingClientRect();\r\n      this.languageSwitchDropdown.classList.add('open');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Open or close the language switch programatically\r\n   * @param force Boolean to force a state\r\n   * @returns Boolean indicating new state\r\n   */\r\n  @Method()\r\n  async toggleDropdown(force?: boolean) {\r\n    this.langSwitchOpen = force ?? !this.langSwitchOpen;\r\n    this.dropdownToggled.emit({ open: this.langSwitchOpen, element: this.host });\r\n    return this.langSwitchOpen;\r\n  }\r\n\r\n  /**\r\n   * Emit a language change to the parent component\r\n   *\r\n   * @param newLang Config of the new language\r\n   */\r\n  switchLanguage(newLang: NavLangEntity) {\r\n    this.languageChanged.emit(newLang.lang);\r\n    this.toggleDropdown(false);\r\n  }\r\n\r\n  private getMergedLanguageConfig(config: NavLangEntity[], overrides?: IAvailableLanguage[]) {\r\n    if (overrides === undefined) {\r\n      return config;\r\n    }\r\n\r\n    return config.map(langConfig =>\r\n      Object.assign(\r\n        {},\r\n        langConfig,\r\n        overrides.find(l => l.lang === langConfig.lang),\r\n      ),\r\n    );\r\n  }\r\n\r\n  private setDropdownRef(element: HTMLElement | undefined) {\r\n    this.languageSwitchDropdown = element;\r\n  }\r\n\r\n  render() {\r\n    if (state.localizedConfig?.header === undefined) return;\r\n    const config = state.localizedConfig.header;\r\n    const mergedConfig = this.getMergedLanguageConfig(\r\n      config.navLang,\r\n      state.languageSwitchOverrides,\r\n    );\r\n\r\n    return (\r\n      <Host>\r\n        <div class={`language-switch ${this.mode}`}>\r\n          <SvgSprite />\r\n          {this.mode === 'dropdown' ? (\r\n            <button\r\n              class=\"lang-btn\"\r\n              aria-expanded={`${this.langSwitchOpen}`}\r\n              aria-haspopup=\"listbox\"\r\n              onClick={() => this.toggleDropdown()}\r\n            >\r\n              <span class=\"visually-hidden\">{config.translations.navLangAriaLabel}</span>\r\n              <span aria-hidden=\"true\">{state.currentLanguage}</span>\r\n              <SvgIcon name=\"pi-arrow-down\" classNames={this.langSwitchOpen ? 'rotated' : ''} />\r\n            </button>\r\n          ) : (\r\n            <span class=\"bold current-language\">\r\n              <span class=\"visually-hidden\">{translate('Current language is English')}</span>\r\n              <span>{state.currentLanguage}</span>\r\n            </span>\r\n          )}\r\n          {this.langSwitchOpen || this.mode === 'list' ? (\r\n            <PostLanguageSwitchList\r\n              navLang={mergedConfig}\r\n              switchLanguage={e => this.switchLanguage(e)}\r\n              dropdownRef={e => e !== undefined && this.setDropdownRef(e)}\r\n            />\r\n          ) : null}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}