{"version":3,"file":"language.service.js","sourceRoot":"","sources":["../../../src/services/language.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { translations } from '../assets/i18n/translations';\r\nimport { state } from '../data/store';\r\n\r\nexport const getUserLang = (\r\n  supportedLanguages: string[],\r\n  implementorPreferredLanguage?: string,\r\n  localStorageKey?: string,\r\n  cookieKey?: string,\r\n) => {\r\n  // If there are no supported languages, well...\r\n  if (supportedLanguages.length === 0) {\r\n    return undefined;\r\n  }\r\n\r\n  // If there is only one language in the config, use this\r\n  if (supportedLanguages.length === 1) {\r\n    return supportedLanguages[0];\r\n  }\r\n\r\n  const url = new URL(window.location.href);\r\n\r\n  /**\r\n   * Build array of possible language definitions in order of importance.\r\n   * At the end is a filter function that will weed out any undefined or null entries.\r\n   */\r\n  let languagesSet: Array<string> = [\r\n    // Check if implementor overrides lang config\r\n    implementorPreferredLanguage,\r\n\r\n    // Check query string param\r\n    url.searchParams.get('lang'),\r\n\r\n    // Check url pathname\r\n    url.pathname.split('/').find(segment => supportedLanguages.includes(segment)),\r\n\r\n    // Check local storage with the key provided\r\n    localStorageKey !== undefined ? window.localStorage.getItem(localStorageKey) : null,\r\n\r\n    // Check cookies\r\n    getCookie('language'),\r\n    getCookie('lang'),\r\n    cookieKey !== undefined ? getCookie(cookieKey) : null,\r\n\r\n    // Check document language\r\n    document.documentElement.lang,\r\n\r\n    // Check browser preferred language\r\n    getPreferredLanguageFromBrowser(supportedLanguages),\r\n\r\n    // Check the state\r\n    state.currentLanguage,\r\n  ].filter((lang): lang is string => !!lang);\r\n\r\n  // Check the set of languages to see if it matches\r\n  // any of the supported languages. Return the first\r\n  // supported language if there is none set\r\n  const lang =\r\n    languagesSet.find(language => supportedLanguages.includes(language)) || supportedLanguages[0];\r\n\r\n  if (!lang || lang.length !== 2) {\r\n    throw new Error(\r\n      `Current language could not be determined from settings or the language provided (${lang}) is not supported by the Header API.`,\r\n    );\r\n  }\r\n\r\n  return lang;\r\n};\r\n\r\n/**\r\n * Persist chosen language to local storage\r\n * @param lang Currently chose language, two char string\r\n */\r\nexport const persistLanguageChoice = (\r\n  lang: string,\r\n  cookieKey?: string,\r\n  localStorageKey?: string,\r\n) => {\r\n  if (localStorageKey !== undefined) {\r\n    window.localStorage.setItem(localStorageKey, lang);\r\n  }\r\n\r\n  if (cookieKey !== undefined) {\r\n    setCookie(cookieKey, lang);\r\n  }\r\n\r\n  state.currentLanguage = lang;\r\n};\r\n\r\n/**\r\n * Read a cookie by name\r\n * https://stackoverflow.com/questions/5639346/what-is-the-shortest-function-for-reading-a-cookie-by-name-in-javascript?rq=1\r\n * @param name Cookie name\r\n * @returns Cookie value or an empty string\r\n */\r\nexport const getCookie = (name: string) => {\r\n  return document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)')?.pop() || '';\r\n};\r\n\r\n/**\r\n * Write a new cookie\r\n * https://developer.mozilla.org/en-US/docs/Web/API/document/cookie#A_little_framework.3A_a_complete_cookies_reader.2Fwriter_with_full_unicode_support\r\n * @param key\r\n * @param value\r\n */\r\nexport const setCookie = (key: string, value: string) => {\r\n  document.cookie = `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\r\n};\r\n\r\nconst getPreferredLanguageFromBrowser = (supportedLanguages: string[]): string | null => {\r\n  // IE & Chrome\r\n  if (navigator.language) {\r\n    const lang = extractLanguage(navigator.language);\r\n    if (supportedLanguages.indexOf(lang) !== -1) {\r\n      return lang;\r\n    }\r\n  }\r\n\r\n  // Chrome supports a list of preferred languages: if the preferred is not supported, we go down the list.\r\n  if (navigator.languages) {\r\n    for (const l of navigator.languages) {\r\n      const lang = extractLanguage(l);\r\n      if (supportedLanguages.indexOf(lang) !== -1) {\r\n        return lang;\r\n      }\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst extractLanguage = (language: string): string => language.substring(0, 2).toLowerCase();\r\n\r\n/**\r\n * Simple translate function for general header UI strings\r\n *\r\n * @param key Translation key\r\n * @param lang Force a language\r\n * @param translationObject Optionally provide translations\r\n * @returns Translated string or the key\r\n */\r\nexport const translate = (key: string, lang?: string, translationObject = translations) =>\r\n  translationObject[key]?.[lang ?? state.currentLanguage ?? ''] ?? key;\r\n"]}