{"version":3,"file":"config.service.js","sourceRoot":"","sources":["../../../src/services/config.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Environment,\r\n  IPortalConfig,\r\n  ILocalizedConfig,\r\n  ICustomConfig,\r\n  ILocalizedCustomConfig,\r\n  LocalizedConfigParameters,\r\n} from '../models/general.model';\r\nimport { NavMainEntity } from '../models/header.model';\r\nimport { getUserLang, persistLanguageChoice } from './language.service';\r\nimport { uniqueId } from '../utils/utils';\r\nimport { markActiveRoute } from './route.service';\r\n\r\n// Prevent double requests\r\nlet request: Promise<IPortalConfig> | null = null;\r\n\r\n// Cache the original os flyout to use it for updates\r\nlet osFlyoutCache: NavMainEntity | null = null;\r\n\r\n/**\r\n * Get a localized config object\r\n *\r\n * @param projectId String identifying the project\r\n * @param language [optional] Preferred language\r\n * @returns Localized config object\r\n */\r\nexport const getLocalizedConfig = async ({\r\n  projectId,\r\n  environment,\r\n  language,\r\n  cookieKey,\r\n  localStorageKey,\r\n  activeRouteProp,\r\n  localizedCustomConfig,\r\n  osFlyoutOverrides,\r\n}: LocalizedConfigParameters): Promise<ILocalizedConfig> => {\r\n  if (!request) {\r\n    request = fetchConfig(projectId, environment);\r\n  }\r\n\r\n  const config = await request;\r\n  const lang = getUserLang(Object.keys(config), language, localStorageKey, cookieKey);\r\n\r\n  if (lang === undefined) {\r\n    throw new Error('Internet Header: unable to determine current language');\r\n  }\r\n\r\n  // Clone config for more predictable state updates\r\n  let localizedConfig: ILocalizedConfig = { ...config[lang] };\r\n\r\n  // Merge custom config with portal config\r\n  if (localizedCustomConfig) {\r\n    const header = localizedCustomConfig?.header?.navMain\r\n      ? {\r\n          ...localizedConfig.header,\r\n          navMain: [...localizedConfig.header.navMain, ...localizedCustomConfig.header.navMain],\r\n        }\r\n      : localizedConfig.header;\r\n    localizedConfig = {\r\n      ...localizedConfig,\r\n      header,\r\n    };\r\n  }\r\n\r\n  // Add entries to flyout_os\r\n  if (osFlyoutOverrides)\r\n    localizedConfig.header.navMain = mergeOsFlyoutOverrides(localizedConfig, osFlyoutOverrides);\r\n\r\n  // Mark active route\r\n  if (activeRouteProp)\r\n    localizedConfig.header.navMain = markActiveRoute(\r\n      localizedConfig.header.navMain,\r\n      activeRouteProp,\r\n    );\r\n\r\n  setMainNavigationIds(localizedConfig?.header?.navMain);\r\n\r\n  // Set the new language choice\r\n  persistLanguageChoice(lang, cookieKey, localStorageKey);\r\n\r\n  return localizedConfig;\r\n};\r\n\r\n/**\r\n * Merge portal config with custom os flyout overrides\r\n * @param config Localized config\r\n * @param osFlyoutOverrides Overrides for the flyout\r\n * @returns Merged localized config\r\n */\r\nexport const mergeOsFlyoutOverrides = (\r\n  config: ILocalizedConfig,\r\n  osFlyoutOverrides: NavMainEntity,\r\n): NavMainEntity[] => {\r\n  if (!osFlyoutOverrides) return config.header.navMain;\r\n\r\n  return config.header.navMain.map(mainNav => {\r\n    if (mainNav.id !== 'flyout_os') return mainNav;\r\n\r\n    if (osFlyoutCache === null) {\r\n      osFlyoutCache = JSON.parse(JSON.stringify(mainNav)) as NavMainEntity;\r\n    }\r\n\r\n    const mainNavText = osFlyoutOverrides.text ?? osFlyoutCache.text;\r\n    const mainNavTitle = osFlyoutOverrides.title ?? osFlyoutCache.title;\r\n\r\n    if (\r\n      !osFlyoutCache.flyout ||\r\n      osFlyoutCache.flyout.length === 0 ||\r\n      !osFlyoutOverrides.flyout ||\r\n      osFlyoutOverrides.flyout.length === 0\r\n    )\r\n      return {\r\n        ...mainNav,\r\n        title: mainNavTitle,\r\n        text: mainNavText,\r\n      };\r\n\r\n    // Add entries for os flyout columns without overriding existing config\r\n    const mainNavFlyout = [\r\n      ...osFlyoutCache.flyout.map((col, index) => {\r\n        const overrides = osFlyoutOverrides.flyout[index];\r\n        const title = overrides.title ?? col.title;\r\n\r\n        const linkList = overrides.linkList ? osFlyoutOverrides.flyout[index].linkList : [];\r\n\r\n        return {\r\n          title,\r\n          linkList: [...col.linkList, ...linkList],\r\n        };\r\n      }),\r\n      ...osFlyoutOverrides.flyout.slice(osFlyoutCache.flyout.length),\r\n    ];\r\n\r\n    return {\r\n      ...mainNav,\r\n      text: mainNavText,\r\n      title: mainNavTitle,\r\n      flyout: mainNavFlyout,\r\n    } as NavMainEntity;\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch the general config based on project id\r\n *\r\n * @returns Promise for Post Portal general config\r\n */\r\nexport const fetchConfig = async (\r\n  projectId: string,\r\n  environment: Environment,\r\n): Promise<IPortalConfig> => {\r\n  // Check if project id is sanitized\r\n  if (!isValidProjectId(projectId)) {\r\n    throw new Error(`Internet Header: invalid project id \"${projectId}\"`);\r\n  }\r\n\r\n  if (projectId === 'test') {\r\n    environment = 'int01';\r\n  }\r\n\r\n  let url = generateConfigUrl(projectId, environment);\r\n\r\n  // Get the config if cache is invalid\r\n  try {\r\n    const res = await fetch(url);\r\n    return (await res.json()) as IPortalConfig;\r\n  } catch (error) {\r\n    throw new Error(`Internet Header: fetching config failed. ${error.message}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Generate an URL with all necessary query params to get the configuration.\r\n * Project id \"test\" will return a test configuration\r\n * @param projectId string\r\n * @param environment int01, int02 or prod\r\n * @returns URL pointing to the project config\r\n */\r\nexport const generateConfigUrl = (projectId: string, environment: Environment): string => {\r\n  if (projectId === 'test') return 'assets/config/test-configuration.json';\r\n\r\n  const parsedEnvironment = environment.toLowerCase();\r\n  const isProd = parsedEnvironment === 'prod';\r\n  const host = `https://${isProd ? 'www' : 'int'}.post.ch`;\r\n  try {\r\n    // Use URL to validate the generated URL\r\n    return new URL(\r\n      `${host}/api/headerjs/Json?serviceid=${encodeURIComponent(projectId)}${\r\n        !isProd ? '&environment=' + parsedEnvironment : ''\r\n      }`,\r\n    ).toString();\r\n  } catch (error) {\r\n    throw new Error(`Internet Header: Config URL is invalid.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Check if project id contains only URL safe characters\r\n *\r\n * @param projectId Project Id string\r\n * @returns The valid project id\r\n */\r\nexport const isValidProjectId = (projectId: string): boolean => {\r\n  return projectId !== '' && projectId.length > 0 && /^[a-zA-Z][\\w-]*[a-zA-Z0-9]$/.test(projectId);\r\n};\r\n\r\n/**\r\n * Get the localized config object from a custom config\r\n *\r\n * @param config String or json object of the custom config\r\n * @param language Specific language\r\n * @returns Localized custom config object\r\n */\r\nexport const getLocalizedCustomConfig = (\r\n  config: string | ICustomConfig,\r\n  language: string,\r\n): ILocalizedCustomConfig | undefined => {\r\n  let customConfig: ICustomConfig;\r\n  try {\r\n    customConfig = typeof config === 'string' ? JSON.parse(config) : config;\r\n  } catch (error) {\r\n    throw new Error(\r\n      `Internet Header: Custom config is invalid. Make sure your custom config contains valid JSON syntax and matches the definition. `,\r\n    );\r\n  }\r\n  let localizedCustomConfig: ILocalizedCustomConfig | undefined = customConfig[language];\r\n  if (localizedCustomConfig?.header?.navMain)\r\n    setMainNavigationIds(localizedCustomConfig.header.navMain);\r\n  return localizedCustomConfig;\r\n};\r\n\r\n/**\r\n * Check if mobile header styles are applied or not\r\n * @returns True if browser is smaller than 1024px\r\n */\r\nexport const isMobile = () => window.innerWidth < 1024;\r\n\r\n/**\r\n * Set unique ID's on main navigation entities but conserve flyout_os to be able to\r\n * identify the online-service flyout, which can be configured by osFlyoutOverrides\r\n */\r\nexport const setMainNavigationIds = (navMainEntities: NavMainEntity[]): void => {\r\n  navMainEntities.forEach(navMainEntity => {\r\n    navMainEntity.id = navMainEntity.id === 'flyout_os' ? navMainEntity.id : uniqueId('main-nav-');\r\n  });\r\n};\r\n"]}