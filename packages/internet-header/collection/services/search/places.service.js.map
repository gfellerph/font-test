{"version":3,"file":"places.service.js","sourceRoot":"","sources":["../../../../src/services/search/places.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { state } from '../../data/store';\r\nimport { GeocodeLocation, GeocodeResponse, ServiceTypesResponse } from '../../models/geocode.model';\r\nimport { gisAPIUrl, pois, placesUrl } from './places.settings';\r\nimport { hardNormalize } from './search-utilities';\r\n\r\n// Never load types twice\r\nlet typesCache: string | null = null;\r\n\r\n/**\r\n * Convert Post POI ids to stao cache ids\r\n * @returns\r\n */\r\nconst convertTypes = async () => {\r\n  if (typesCache === null) {\r\n    try {\r\n      const typesResponse = await fetch(`${gisAPIUrl}/Types?lang=${state.currentLanguage}`);\r\n      const typesJSON = (await typesResponse.json()) as ServiceTypesResponse;\r\n      typesCache = encodeURIComponent(\r\n        pois\r\n          .map(poi => {\r\n            const foundType = typesJSON.types.find(type => type.id === poi);\r\n            return foundType?.tag;\r\n          })\r\n          .filter(poi => poi !== undefined)\r\n          .join(','),\r\n      );\r\n    } catch (error) {\r\n      console.error(\r\n        'Fetching places failed. Did you add \"places.post.ch\" to your connect-src content security policy?',\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  return typesCache;\r\n};\r\n\r\n/**\r\n * Query the Gis API for locations and localities (pois)\r\n *\r\n * @param query User input string\r\n * @returns\r\n */\r\nexport const queryPlaces = async (query: string): Promise<GeocodeLocation[]> => {\r\n  if (query.length === 0) {\r\n    return [];\r\n  }\r\n\r\n  const limit = 8;\r\n  const excludeTypes = ['address', 'locality', 'region'];\r\n  const types = await convertTypes();\r\n  const geocoderUrl = `${gisAPIUrl}/Geocode?query=${encodeURIComponent(query)}&lang=${\r\n    state.currentLanguage\r\n  }&pois=${types}&limit=33`;\r\n\r\n  try {\r\n    const geocodeResponse = await fetch(geocoderUrl);\r\n    const geocodeJSON = (await geocodeResponse.json()) as GeocodeResponse;\r\n    if (!geocodeJSON.ok) {\r\n      throw new Error(geocodeJSON.info);\r\n    }\r\n    return geocodeJSON.locations\r\n      .filter(location => !excludeTypes.includes(location.type))\r\n      .slice(0, limit);\r\n  } catch (error) {\r\n    console.error(\r\n      'Fetching places failed. Did you add \"places.post.ch\" to your connect-src content security policy?',\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Try to highlight place suggestions\r\n * Limitation: accented chars are not handled by this basic function\r\n *\r\n * @param query Search term\r\n * @param place Name of the suggested place\r\n * @returns\r\n */\r\nexport const highlightPlacesString = (query: string | undefined, place: string) => {\r\n  if (query === undefined) return place;\r\n\r\n  // Strip accents from the string\r\n  const reference = hardNormalize(place);\r\n  const q = hardNormalize(query);\r\n  const indexOfQuery = reference.indexOf(q);\r\n\r\n  if (indexOfQuery < 0) {\r\n    return place;\r\n  }\r\n\r\n  return `${place.substring(0, indexOfQuery)}{${place.substring(\r\n    indexOfQuery,\r\n    indexOfQuery + query.length,\r\n  )}}${place.substring(indexOfQuery + query.length, place.length)}`;\r\n};\r\n\r\n/**\r\n * Get the deeplink to any location found via geocoder\r\n *\r\n * @param location A location from the Gis API Geocode endpoint\r\n * @returns\r\n */\r\nexport const getPlacesUrl = (location: GeocodeLocation): string => {\r\n  let url: string;\r\n\r\n  if (location.id) {\r\n    url = `${placesUrl}/${state.currentLanguage}/${location.id}/detail`;\r\n  } else {\r\n    url = `${placesUrl}?preselecttext=${encodeURIComponent(location.name)}`;\r\n  }\r\n\r\n  return url;\r\n};\r\n"]}