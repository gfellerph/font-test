{"version":3,"file":"search.service.js","sourceRoot":"","sources":["../../../../src/services/search/search.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAEzC,OAAO,EAAE,2BAA2B,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAEzE;;;;;GAKG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EACvC,KAAa,EACb,YAA2B,EACE,EAAE;EAC/B,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;EAC3D,OAAO,cAAc;IACnB,CAAC,CAAC,2BAA2B,CAAC,KAAK,EAAE,YAAY,CAAC;IAClD,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAAa,EAAsB,EAAE;;EACpE,IAAI,CAAA,MAAA,KAAK,CAAC,eAAe,0CAAE,MAAM,CAAC,MAAM,MAAK,SAAS,EAAE;IACtD,OAAO;GACR;EACD,MAAM,EAAE,aAAa,EAAE,GAAG,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC;EAC9D,MAAM,WAAW,GAAG,MAAM,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;EACtD,OAAO,GAAG,aAAa,GAAG,WAAW,WAAW,CAAC;AACnD,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAO,MAAW,EAAE,MAAW,EAAE,SAAS,GAAG,CAAC,EAAc,EAAE;EAC1F,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;EACxF,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;AACxE,CAAC,CAAC","sourcesContent":["import { state } from '../../data/store';\r\nimport { ISearchConfig } from '../../models/header.model';\r\nimport { getTrackAndTraceRedirectUrl, isParcel } from './parcel.service';\r\n\r\n/**\r\n * Construct a search page url from a query\r\n *\r\n * @param query Search term\r\n * @returns\r\n */\r\nexport const getSearchRedirectUrl = async (\r\n  query: string,\r\n  searchConfig: ISearchConfig,\r\n): Promise<string | undefined> => {\r\n  const isTrackTraceId = await isParcel(query, searchConfig);\r\n  return isTrackTraceId\r\n    ? getTrackAndTraceRedirectUrl(query, searchConfig)\r\n    : getSearchPageUrl(query);\r\n};\r\n\r\n/**\r\n * Stitch toghether the search page URL\r\n *\r\n * @param query Search term\r\n * @returns Search page URL\r\n */\r\nexport const getSearchPageUrl = (query: string): string | undefined => {\r\n  if (state.localizedConfig?.header.search === undefined) {\r\n    return;\r\n  }\r\n  const { searchPageUrl } = state.localizedConfig.header.search;\r\n  const searchParam = `#q=${encodeURIComponent(query)}`;\r\n  return `${searchPageUrl}${searchParam}&t=AllTab`;\r\n};\r\n\r\n/**\r\n * Equalize the length of two arrays while filling up empty slots up to max. length\r\n *\r\n * @param arrayA First array\r\n * @param arrayB Second array\r\n * @param maxLength Max. length of result array\r\n * @returns Array with two resulting arrays\r\n */\r\nexport const equalizeArrays = <A, B>(arrayA: A[], arrayB: B[], maxLength = 8): [A[], B[]] => {\r\n  const coveoSliced = arrayA.slice(0, Math.max(maxLength / 2, maxLength - arrayB.length));\r\n  return [coveoSliced, arrayB.slice(0, maxLength - coveoSliced.length)];\r\n};\r\n"]}