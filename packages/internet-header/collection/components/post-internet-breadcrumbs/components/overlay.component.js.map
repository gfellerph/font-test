{"version":3,"file":"overlay.component.js","sourceRoot":"","sources":["../../../../../src/components/post-internet-breadcrumbs/components/overlay.component.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,mCAAmC,CAAC;AAE5D,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAEnD;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAOhC,EAAE,EAAE,CAAC,CACJ,WACE,KAAK,EAAC,SAAS,EACf,OAAO,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,EAC9B,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,EACnE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;EAEhD,WAAK,KAAK,EAAC,WAAW,EAAC,IAAI,EAAC,QAAQ;IAClC,EAAC,SAAS;MACR,WACE,KAAK,EAAC,mBAAmB,EACzB,QAAQ,EAAC,IAAI,CAAC,uBAAuB,EACrC,IAAI,EAAC,UAAU,EACf,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,EAAE;QAEjC,cACE,KAAK,EAAE,qEAAqE,KAAK,CAAC,OAAO,CAAC,EAAE,EAAE,EAC9F,OAAO,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE;UAE9B,YAAM,KAAK,EAAC,iBAAiB,IAAE,KAAK,CAAC,eAAe,CAAQ;UAC5D,EAAC,OAAO,IAAC,IAAI,EAAC,UAAU,GAAW,CAC5B;QACT,cACE,GAAG,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,EACzB,WAAW,EAAC,GAAG,EACf,KAAK,EAAC,OAAO,EACb,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,GACvC,CACN,CACI;IACZ,WAAK,KAAK,EAAC,gBAAgB;MACzB,WAAK,KAAK,EAAC,QAAQ,GAAO,CACtB,CACF,CACF,CACP,CAAC","sourcesContent":["import { h } from '@stencil/core';\r\nimport { SvgIcon } from '../../../utils/svg-icon.component';\r\nimport { IBreadcrumbOverlay } from '../../../models/breadcrumbs.model';\r\nimport { FocusTrap } from './focus-trap.component';\r\n\r\n/**\r\n * Overlay implementation with focus trap according to\r\n * https://www.accessibility-developer-guide.com/examples/widgets/dialog/#modal-dialog\r\n *\r\n * @param props\r\n * @returns\r\n */\r\nexport const OverlayComponent = (props: {\r\n  overlay: IBreadcrumbOverlay;\r\n  onClick: () => void;\r\n  onKeyDown?: (event?: KeyboardEvent) => void;\r\n  iFrameRef: (element: HTMLIFrameElement) => void;\r\n  overlayRef: (element: HTMLElement | undefined) => void;\r\n  closeButtonText: string;\r\n}) => (\r\n  <div\r\n    class=\"overlay\"\r\n    onClick={() => props.onClick()}\r\n    onKeyDown={e => props.onKeyDown !== undefined && props.onKeyDown(e)}\r\n    ref={e => e !== undefined && props.overlayRef(e)}\r\n  >\r\n    <div class=\"container\" role=\"dialog\">\r\n      <FocusTrap>\r\n        <div\r\n          class=\"overlay-container\"\r\n          tabindex=\"-1\" /* For initial focus */\r\n          role=\"document\"\r\n          onClick={e => e.stopPropagation()}\r\n        >\r\n          <button\r\n            class={`overlay-close btn-blank d-inline-flex align-items-center nav-link ${props.overlay.id}`}\r\n            onClick={() => props.onClick()}\r\n          >\r\n            <span class=\"visually-hidden\">{props.closeButtonText}</span>\r\n            <SvgIcon name=\"pi-close\"></SvgIcon>\r\n          </button>\r\n          <iframe\r\n            src={props.overlay.target}\r\n            frameborder=\"0\"\r\n            class=\"frame\"\r\n            ref={e => e !== undefined && props.iFrameRef(e)}\r\n          ></iframe>\r\n        </div>\r\n      </FocusTrap>\r\n      <div class=\"loader-wrapper\">\r\n        <div class=\"loader\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n"]}