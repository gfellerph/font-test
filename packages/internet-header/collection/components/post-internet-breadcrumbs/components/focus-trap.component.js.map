{"version":3,"file":"focus-trap.component.js","sourceRoot":"","sources":["../../../../../src/components/post-internet-breadcrumbs/components/focus-trap.component.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAuB,CAAC,EAAE,MAAM,eAAe,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAEpC,IAAI,GAAG,GAAG,CAAC,CAAC;AAEZ;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,SAAS,GAA8C,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;;EACtF,mCAAmC;EACnC,MAAM,MAAM,GAAG,MAAA,KAAK,CAAC,MAAM,mCAAI,KAAK,CAAC;EAErC,MAAM,aAAa,GAAG,CAAC,KAAiB,EAAE,IAAsB,EAAE,EAAE;IAClE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;MACpB,OAAO;KACR;IAED,yCAAyC;IACzC,MAAM,cAAc,GAAG,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IAClE,MAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC;IACjD,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;IAEtC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;MACrB,OAAO;KACR;IAED,0CAA0C;IAC1C,KAAK,CAAC,cAAc,EAAE,CAAC;IACvB,KAAK,CAAC,eAAe,EAAE,CAAC;IAExB,+CAA+C;IAC/C,MAAM,UAAU,GAAG,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC/D,IAAI,YAAY,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IACzC,YAAY,CAAC,KAAK,EAAE,CAAC;EACvB,CAAC,CAAC;EAEF,GAAG,EAAE,CAAC;EAEN,OAAO;IACL,aACE,IAAI,EAAC,MAAM,iBACC,MAAM,EAClB,KAAK,EAAC,iBAAiB,EACvB,GAAG,EAAE,qBAAqB,GAAG,EAAE,EAC/B,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,IAAI,aAAa,CAAC,CAAC,EAAE,MAAM,CAAC,GAClD;IACF,QAAQ;IACR,aACE,IAAI,EAAC,MAAM,iBACC,MAAM,EAClB,KAAK,EAAC,iBAAiB,EACvB,GAAG,EAAE,oBAAoB,GAAG,EAAE,EAC9B,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,IAAI,aAAa,CAAC,CAAC,EAAE,OAAO,CAAC,GACnD;GACH,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { FunctionalComponent, h } from '@stencil/core';\r\nimport { tabbable } from 'tabbable';\r\n\r\nlet key = 0;\r\n\r\n/**\r\n * Trap the focus inside a specific container by prepending/appending two focus trap\r\n * input boxes who return the focus into the container.\r\n *\r\n * @param props active: activate or deactivate the focus trap\r\n * @param children Child nodes\r\n * @returns\r\n */\r\nexport const FocusTrap: FunctionalComponent<{ active?: boolean }> = (props, children) => {\r\n  // Default value for active is true\r\n  const active = props.active ?? false;\r\n\r\n  const handleFocusIn = (event: FocusEvent, mode: 'first' | 'last') => {\r\n    if (!children.length) {\r\n      return;\r\n    }\r\n\r\n    // Try to get a list of tabbable elements\r\n    const containerIndex = mode === 'first' ? 0 : children.length - 1;\r\n    const container = children[containerIndex].$elm$;\r\n    const focusable = tabbable(container);\r\n\r\n    if (!focusable.length) {\r\n      return;\r\n    }\r\n\r\n    // We can trap the focus, cancel the event\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    // Select the appropriate element from the list\r\n    const focusIndex = mode === 'first' ? 0 : focusable.length - 1;\r\n    let focusElement = focusable[focusIndex];\r\n    focusElement.focus();\r\n  };\r\n\r\n  key++;\r\n\r\n  return [\r\n    <input\r\n      type=\"text\"\r\n      aria-hidden=\"true\"\r\n      class=\"visually-hidden\"\r\n      key={`focus-trap-before-${key}`}\r\n      onFocusin={e => active && handleFocusIn(e, 'last')}\r\n    />,\r\n    children,\r\n    <input\r\n      type=\"text\"\r\n      aria-hidden=\"true\"\r\n      class=\"visually-hidden\"\r\n      key={`focus-trap-after-${key}`}\r\n      onFocusin={e => active && handleFocusIn(e, 'first')}\r\n    />,\r\n  ];\r\n};\r\n"]}