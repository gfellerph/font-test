{"version":3,"file":"post-language-switch.js","sourceRoot":"","sources":["../../../../src/components/post-language-switch/post-language-switch.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Component,\r\n  Event,\r\n  Host,\r\n  h,\r\n  Method,\r\n  EventEmitter,\r\n  State,\r\n  Prop,\r\n  Element,\r\n} from '@stencil/core';\r\nimport { SvgSprite } from '../../utils/svg-sprite.component';\r\nimport { SvgIcon } from '../../utils/svg-icon.component';\r\nimport { state } from '../../data/store';\r\nimport {\r\n  DropdownElement,\r\n  DropdownEvent,\r\n  HasDropdown,\r\n  NavLangEntity,\r\n} from '../../models/header.model';\r\nimport { userPrefersReducedMotion, elementHasTransition } from '../../services/ui.service';\r\nimport { translate } from '../../services/language.service';\r\nimport { PostLanguageSwitchList } from './components/post-language-switch-list';\r\nimport { IAvailableLanguage } from '../../models/language.model';\r\n\r\n@Component({\r\n  tag: 'post-language-switch',\r\n  styleUrl: 'post-language-switch.scss',\r\n  shadow: true,\r\n})\r\nexport class PostLanguageSwitch implements HasDropdown {\r\n  @Prop() mode: 'dropdown' | 'list';\r\n  @State() langSwitchOpen = false;\r\n  @Element() host: DropdownElement;\r\n  @Event() dropdownToggled: EventEmitter<DropdownEvent>;\r\n  @Event({ bubbles: true }) languageChanged: EventEmitter<string>;\r\n  private languageSwitchDropdown: HTMLElement | undefined;\r\n\r\n  componentWillUpdate() {\r\n    // Check if language switch got set to close and if mode is dropdown\r\n    if (this.languageSwitchDropdown && !this.langSwitchOpen && this.mode == 'dropdown') {\r\n      this.languageSwitchDropdown.classList.remove('open');\r\n\r\n      // Check if element has transition applied and whether user prefers to see animations or not\r\n      if (\r\n        elementHasTransition(this.languageSwitchDropdown, 'transform') &&\r\n        !userPrefersReducedMotion()\r\n      ) {\r\n        // Wait for CSS transition 'transform' to end before continuing\r\n        return new Promise<boolean>(resolve => {\r\n          this.languageSwitchDropdown?.addEventListener('transitionend', event => {\r\n            if (event.propertyName === 'transform') {\r\n              resolve(true);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Language switch got set to open\r\n    if (this.languageSwitchDropdown && this.langSwitchOpen) {\r\n      // Force browser to redraw/refresh DOM before adding 'open' class\r\n      this.languageSwitchDropdown.getBoundingClientRect();\r\n      this.languageSwitchDropdown.classList.add('open');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Open or close the language switch programatically\r\n   * @param force Boolean to force a state\r\n   * @returns Boolean indicating new state\r\n   */\r\n  @Method()\r\n  async toggleDropdown(force?: boolean) {\r\n    this.langSwitchOpen = force ?? !this.langSwitchOpen;\r\n    this.dropdownToggled.emit({ open: this.langSwitchOpen, element: this.host });\r\n    return this.langSwitchOpen;\r\n  }\r\n\r\n  /**\r\n   * Emit a language change to the parent component\r\n   *\r\n   * @param newLang Config of the new language\r\n   */\r\n  switchLanguage(newLang: NavLangEntity) {\r\n    this.languageChanged.emit(newLang.lang);\r\n    this.toggleDropdown(false);\r\n  }\r\n\r\n  private getMergedLanguageConfig(config: NavLangEntity[], overrides?: IAvailableLanguage[]) {\r\n    if (overrides === undefined) {\r\n      return config;\r\n    }\r\n\r\n    return config.map(langConfig =>\r\n      Object.assign(\r\n        {},\r\n        langConfig,\r\n        overrides.find(l => l.lang === langConfig.lang),\r\n      ),\r\n    );\r\n  }\r\n\r\n  private setDropdownRef(element: HTMLElement | undefined) {\r\n    this.languageSwitchDropdown = element;\r\n  }\r\n\r\n  render() {\r\n    if (state.localizedConfig?.header === undefined) return;\r\n    const config = state.localizedConfig.header;\r\n    const mergedConfig = this.getMergedLanguageConfig(\r\n      config.navLang,\r\n      state.languageSwitchOverrides,\r\n    );\r\n\r\n    return (\r\n      <Host>\r\n        <div class={`language-switch ${this.mode}`}>\r\n          <SvgSprite />\r\n          {this.mode === 'dropdown' ? (\r\n            <button\r\n              class=\"lang-btn\"\r\n              aria-expanded={`${this.langSwitchOpen}`}\r\n              aria-haspopup=\"listbox\"\r\n              onClick={() => this.toggleDropdown()}\r\n            >\r\n              <span class=\"visually-hidden\">{config.translations.navLangAriaLabel}</span>\r\n              <span aria-hidden=\"true\">{state.currentLanguage}</span>\r\n              <SvgIcon name=\"pi-arrow-down\" classNames={this.langSwitchOpen ? 'rotated' : ''} />\r\n            </button>\r\n          ) : (\r\n            <span class=\"bold current-language\">\r\n              <span class=\"visually-hidden\">{translate('Current language is English')}</span>\r\n              <span>{state.currentLanguage}</span>\r\n            </span>\r\n          )}\r\n          {this.langSwitchOpen || this.mode === 'list' ? (\r\n            <PostLanguageSwitchList\r\n              navLang={mergedConfig}\r\n              switchLanguage={e => this.switchLanguage(e)}\r\n              dropdownRef={e => e !== undefined && this.setDropdownRef(e)}\r\n            />\r\n          ) : null}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}